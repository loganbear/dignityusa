<?php
//
// TODO: Monthly donations go to Guardian Angel financial account.
//
// $Id$
/**
 * This hook is called after a db write on some core objects.
 *
 * Parameters:
 * $op - operation being performed with CiviCRM object. Can have the following values:
 *      'view' : The CiviCRM object is going to be displayed
 *      'create' : The CiviCRM object is created (or contacts are being added to a group)
 *      'edit' : The CiviCRM object is edited
 *      'delete' : The CiviCRM object is being deleted (or contacts are being removed from a group)
 *      'trash': The contact is being moved to trash (Contact objects only)
 *      'restore': The contact is being restored from trash (Contact objects only)
 * $objectName - can have the following values:
 *      'Individual'
 *      'Household'
 *      'Organization'
 *      'Grant'
 *      'Group'
 *      'GroupContact'
 *      'Relationship'
 *      'Activity'
 *      'Contribution'
 *      'Profile' (while this is not really an object, people have expressed an interest to perform an action when a profile is created/edited)
 *      'Membership'
 *      'Participant'
 *      'UFMatch' (when an object is linked to a CMS user record, at the request of GordonH. A UFMatch object is passed for both the pre and post hooks)
 *      'Event'
 *      'EntityTag'
 *      'Tag'
 *      'PledgePayment'
 *      'ContributionRecur'
 *      'Pledge'
 *      'LineItem'
 *
 * $objectId - the unique identifier for the object. tagID in case of EntityTag
 * $params - the reference to the object if available. For case of EntityTag it is an array of (entityTable, entityIDs)
 *
 * Returns
 * None
 */
function dignityusa_civicrm_pre( $op, $objectName, $id, &$params ) {    
    if ( $objectName == 'LineItem' && $op == 'create' ) {
         if ( $params["financial_type_id"] == 2 && ( $params['line_total'] = 50 || $params['line_total'] == 100 )) {
            // Look for Contribution
            $apiParams = array('version'    => 3,
                               'sequential' => 1,
                               'id'         => $id,   // $contribId,
                            );
            $contribInfo = civicrm_api('Contribution', 'getsingle', $apiParams);
            if ( $contribInfo["is_error"] != 0 ) {
                CRM_Core_Error::debug('Contribution Get Single', $apiParams);
//                CRM_Core_Error::debug('Contribution', $contribInfo);
                exit;
            }
            
            // Contribution may be in honor of/memory of.  If so, look for honoree's chapter
            if (is_null($contribInfo["honor_contact_id"]) ) {
                $cId = $contribInfo["contact_id"];
            } else {
                $cId = $contribInfo["honor_contact_id"];
            }
            
            // Get Contact Record
            $apiParams = array('version'    => 3,
                               'contact_id' => $cId,
                               'return'     => 'custom_1',
                               'sequential' => 1,
                            );
            $contactInfo = civicrm_api('Contact', 'getsingle', $apiParams);
            if ( isset($contactInfo["is_error"]) ) {
                CRM_Core_Error::debug('Contact Get Params', $apiParams);
                CRM_Core_Error::debug('Contact Get Result', $contactInfo);
                exit;
            }
            $chapterName = $contactInfo["custom_1"]["0"];
            
            // Get Chapter Record
            $apiParams = array('version'            => 3,
                               'return'             => 'custom_39', // Field Id = 39
                               'contact_sub_type'   => 'Chapter',
                               'organization_name'  => $chapterName,
                               'sequential'         => 1,
                            );
            $chapterInfo = civicrm_api('Contact', 'get', $apiParams);
            if ( $chapterInfo["is_error"] != 0 ) {
                CRM_Core_Error::debug('Contact Get Value', $apiParams);
                CRM_Core_Error::debug('Contact Get Results', $chapterInfo);
                exit;
            }
  
            if ( $chapterInfo['count'] != 0 ) {
                $chapterShare = $chapterInfo["values"]["0"]["custom_39"];
                // Find line item record for membership
                        
                // Remove Chapter share of membership
                if ($params['line_total'] == 50 ) {  // Single
                    $amtChg = $chapterShare;
                    $params['price_field_id'] = 93;
                    $params['price_field_value_id'] = 226;
                } elseif ($params['unit_price'] == 100 ) {  // Couple
                    $amtChg = $chapterShare * 2;
                    $params['price_field_id'] = 93;
                    $params['price_field_value_id'] = 227;
                } else {
                    $amtChg = 0;
                }
                
                if ( $amtChg != 0 ) {
                    $params['line_total'] = $params['line_total'] - $amtChg;
                    $params['unit_price'] = $params['line_total'];
                    $params['qty'] = 1;
                    $newParams = array('line_total'             => $amtChg,
                                       'unit_price'             => $amtChg,
                                       'price_field_value_id'   => 230,
                                       'price_field_id'         => 96,
                                       'label'                  => $chapterName,
                                       'financial_type_id'      => 8,
                                       'field_title'            => 'Chapter Membership',
                                       'description'            => $chapterName,
                                       'qty'                    => 1,
                                       'participant_count'      => 0,
                                       'max_value'              => '',
                                       'membership_type_id'     => $params['membership_type_id'],
                                       'membership_num_terms'   => $params['membership_num_terms'],
                                       'auto_renew'             => $params['auto_renew'],
                                       'html_type'              => 'Radio',
                                       'entity_table'           => 'civicrm_contribution',
                                       'entity_id'              => $id,
                                       'version'                => 3,
                                       'sequential'             => 1,
                                      );
                    $result = civicrm_api('LineItem', 'create', $newParams);
                    if ( $result['is_error'] != 0 ) {
                        CRM_Core_Error::debug('New Line Item Create', $newParams);
                        CRM_Core_Error::debug('Result', $result);
                        exit;
                    }
                    $apiParams = array('version'            => 3,
                                       'sequential'         => 1,
                                       'entity_id'          => $id,
                                       'financial_type_id'  => 8,
                                    );
                    $newLI = civicrm_api('LineItem', 'getsingle', $apiParams);
                    if ( $newLI['is_error'] != 0 ) {
                        CRM_Core_Error::debug('New Line Get', $apiParams);
                        exit;                 
                    }
                    
                    $newLineItem = new CRM_Price_BAO_LineItem();
                    $newLineItem->copyValues($newLI);
                
                    $contribId = array('id' => $id,
                                       );
                    $contribution = CRM_Contribute_BAO_Contribution::getValues($contribId, $values, $ids);
                    if ( is_null($contribution)) {
                        CRM_Core_Error::debug('New Contribution', $contribId);
                        CRM_Core_Error::debug('Values', $values);
                        CRM_Core_Error::debug('Ids', $ids);
                        exit;
                    }
                   CRM_Financial_BAO_FinancialItem::add($newLineItem, $contribution);
                }
            }
        }
    }    
}


/**
 * This hook is invoked when building a CiviCRM form.
 * This hook should also be used to set the default values of a form element
 *
 * Parameters:
 * string $formName - the name of the form
 * object $form - reference to the form object
 */


function dignityusa_civicrm_buildForm( $formName, &$form ) {
    if ($form->getVar('_id') == 3) {
       if ( $formName == 'CRM_Contribute_Form_Contribution_Main')  {
//            CRM_Core_Error::debug('Form', $form);
//            exit;
            $form->add('group','spouseInfo',ts('Spouse Information'));
            $form->add('text', 'spouseFirstName', ts('Spouse First Name'));
            $form->add('text', 'spouseLastName', ts('Spouse Last Name'));
            $form->add('text', 'spouseEmail', ts('Spouse Email'));
            $form->addRule("spouseEmail", ts('Email is not valid.'), 'email');
        }
        elseif
        (( $formName == 'CRM_Contribute_Form_Contribution_Confirm') ||
         ( $formName == 'CRM_Contribute_Form_Contribution_ThankYou') ) {
            $defaults = array();
            $sFirst = $form->_params["spouseFirstName"];
            $sLast = $form->_params["spouseLastName"];
            $sEmail = $form->_params["spouseEmail"];
            $form->_values["spouseFirstName"] = $sFirst;
            $form->_values["spouseLastName"] = $sLast;
            $form->_values["spouseEmail"] = $sEmail;
            $form->add('group','spouseInfo',ts('Spouse Information'));
            $form->add('text', 'spouseFirstName', ts('Spouse First Name'), $sFirst);
            $form->add('text', 'spouseLastName', ts('Spouse Last Name'), $sLast);
            $form->add('text', 'spouseEmail', ts('Spouse Email'), $sEmail);
            $defaults['spouseFirstName'] =  $sFirst;
            $defaults['spouseLastName'] =  $sLast;
            $defaults['spouseEmail'] =  $sEmail;
            $form->setDefaults($defaults);
//            CRM_Core_Error::debug('Form', $form);
//            exit;
            
        } 
    }  
/*    elseif ($form->getVar('_id') == 31 ) {
        $chNum = $_GET["chNum"];
        if ($chNum) {
            $params = array('version' => 3,
                            'sequential' => 1,
                            'id' => $chNum,
                            'option_id' => 74,
                            );
            $result = civicrm_api('OptionValue', 'getsingle', $params);
            if ($result['is_error'] == 0) {
                $form['custom_33']->setValue($result['value']);
            }
        }
    }  */
}

/**
 * hook_civicrm_postProcess( $formName, &$form )
 *
 * This hook is invoked when a CiviCRM form is submitted. If the module has injected
 * any form elements, this hook should save the values in the database.
 * 
 * Parameters:
 * string $formName - the name of the form
 * object $form - reference to the form object
 * 
 * Returns:
 * null - the return value is ignored
 *
 */

function dignityusa_civicrm_postProcess( $formName, &$form) {
    if ( $formName == 'CRM_Contribute_Form_Contribution_Confirm') {
        if ($form->getVar('_id') == 3 || $form->getVar('_id') == 36) {
//           CRM_Core_Error::debug('Form', $form);
//           exit;
            // Set up spousal relationship
            $sFirst = $form->_params["spouseFirstName"];
            if ( $sFirst ) {
                $cId = $form->getVar('_contactID');
                $sLast = $form->_params["spouseLastName"];
                $sEmail = $form->_params["spouseEmail"];
                // check for the spouse record
                $params = array('version' => 3,
                                'first_name' => $sFirst,
                                'last_name' => $sLast,
                                'email' => $sEmail,
                                );
                $result = civicrm_api('Contact', 'get', $params);
                if ( $result['count'] == 0) {
                    // Cannot find - create and get Spouse ID
                    $params = array('version' => 3,
                                    'sequential' => 1,
                                    'first_name' => $sFirst,
                                    'last_name' => $sLast,
                                    'email' => $sEmail,
                                    'contact_type' => 'Individual',
                                    );
                    $result = civicrm_api('Contact', 'create', $params);
                    $sID = $result['id'];
                    $params = array('version' => 3,
                                    'sequential' => 1,
                                    'contact_id' => $sID,
                                    'location_type_id' => 1,
                                    'street_address' => $form->_params['street_address-Primary'],
                                    'city' => $form->_params['city-Primary'],
                                    'postal_code' => $form->_params['postal_code-Primary'],
                                    'country_id' => $form->_params['country-Primary'],
                                    'state_province_id' => $form->_params['state_province-Primary'],
                                    'is_primary' => TRUE,
                                    );
                    $result = civicrm_api('Address', 'create', $params);
        
                } else {
                    $sID = $result['id'] ;
                }

                // See if contact is contact a
                $params = array('version' => 3,
                                'sequential' => 1,
                                'contact_id_a' => $cid,
                                'contact_id_b' => $sID,
                                'relationship_type_id' => 2,
                                );
                $result = civicrm_api('Relationship', 'get', $params);
                if ( $result['count'] == 0) {
                    // See if contact is contact b
                    $params = array('version' => 3,
                                    'sequential' => 1,
                                    'contact_id_a' => $sID,
                                    'contact_id_b' => $cid,
                                    'relationship_type_id' => 2,
                                    );
                    $result = civicrm_api('Relationship', 'get', $params);
                    if ( $result['count'] == 0) {
                        $params = array('version' => 3,
                                        'sequential' => 1,
                                        'contact_id_a' => $cid,
                                        'contact_id_b' => $sID,
                                        'relationship_type_id' => 2,
                                        );                        
                        $result = civicrm_api('Relationship', 'create', $params);                        
                    }
                }
            }
        }
    }
}

/**
 * hook_civicrm_validateForm( $formName, &$fields, &$files, &$form, &$errors )
 * Description: Validation of forms. This hook was introduced in v4.2
 * Parameters
 * $formName - Name of the form being validated, you will typically switch off this value.
 * $fields - Array of name value pairs for all 'POST'ed form values
 * $files - Array of file properties as sent by PHP POST protocol
 * $form - Reference to the civicrm form object. This is useful if you want to retrieve any values that we've constructed in the form
 * $errors - Reference to the errors array. All errors will be added to this array
 *
 * Returns
 * true if form validates successfully,
 * otherwise array with input field names as keys and error message strings as values
**/

function dignityusa_civicrm_validateForm( $formName, &$fields, &$files, &$form, &$errors ) {
    if ( $formName == 'CRM_Contribute_Form_Contribution_Main') {
        $fId = $form->getVar('_id');
        if ($fId == 3 || $fId == 36 || $fId == 37 ) {
            if ($fields['price_10'] == 25) {
                if ( strlen(trim($fields['spouseFirstName'])) == 0 ) {
                    $errors['spouseFirstName'] = ts('Spouse First Name required for Couple Membership');
                }
                if ( strlen(trim($fields['spouseLastName'])) == 0 ) {
                    $errors['spouseLastName'] = ts('Spouse Last Name required for Couple Membership');
                }
                if ( strlen(trim($fields['spouseEmail'])) == 0) {
                    $errors['spouseEmail'] = ts('Spouse Email required for Couple Membership');
                }
            }
        }
        
        if ($form->getVar('_id') == 32 ) {
// Make sure that requested date is greater than today
            $reqDate = strtotime($fields['custom_33']);
            $todaysDate = strtotime(date('Y-m-d'));
            if ( $reqDate <= $todaysDate ) {
                $errors['custom_33'] = ts('Please request a date in the future.');
            }
            $specDate = date('Y-m-d', $reqDate);
            $query = ts("SELECT * FROM civicrm_value_day_donation_10
                        WHERE cast(donation_day_33 as date) = cast('" . $specDate ."' as date)");
         
            $dao = &CRM_Core_DAO::executeQuery($query);
            while ($dao->fetch()) {
                $errors['custom_33'] = ts('Date already claimed');
            }
        }
    }
}

/*
 *  hook_civicrm_tokens( &$tokens )
 *  This hook is called to allow custom tokens to be defined.  Their values will need to be supplied by hook_civicrm_tokenValues
 *  Parameters:
 *    $tokens: reference to the associative array of custom tokens that are available to be used in mailings and other contexts.
 *    This will be an empty array unless an implementation of hook_civicrm_tokens adds items to it
 */

function dignityusa_civicrm_tokens(&$tokens) {
    $tokens['donor'] = array(
        'donor.current_donation' => 'Donations: Curr Yr Detail',
        'donor.prior_donation' => 'Donations: Prior Yr Detail',
        'donor.total_current' => 'Donations: Curr Yr Total',
        'donor.total_prior' => 'Donations: Prior Yr Total',
    );
}

/*
 * hook_civicrm_tokenValues( &$values, $cids, $job = null, $tokens = array(), $context = null )
 */

function dignityusa_civicrm_tokenValues(&$values, $cids, $job = null, $tokens = array(), $context = null) {
    // Check to see if any of the donor tokens are needed
    if (!empty($tokens['donor'])) {
        // Next check the current donation defail
        if (in_array('current_donation', $tokens['donor'])) {
            $contacts = implode(',', $cids);
            $dao = &CRM_Core_DAO::executeQuery("
        SELECT cc.contact_id, cc.total_amount, cc.receive_date, cc.check_number, cc.source, con.display_name, hon.display_name as honoree, pi.label AS payment_instrument, ht.label AS honor_type, cType.name as contrib_type
        FROM civicrm_contribution cc
        INNER JOIN civicrm_contact con ON con.id = cc.contact_id
        LEFT JOIN civicrm_contribution_type cType ON ( cType.id = cc.contribution_type_id ) 
        LEFT JOIN civicrm_contact hon ON hon.id = cc.honor_contact_id
        LEFT JOIN civicrm_option_value pi ON cc.payment_instrument_id = pi.value AND pi.option_group_id = (SELECT id FROM civicrm_option_group WHERE name = 'payment_instrument')
        LEFT JOIN civicrm_option_value ht ON cc.honor_type_id = ht.value AND ht.option_group_id = (SELECT id FROM civicrm_option_group WHERE name = 'honor_type')
        WHERE cc.is_test = 0 AND cType.is_deductible = 1 AND cc.contribution_status_id = 1
        AND (YEAR(cc.receive_date) = YEAR(NOW())) and cc.contact_id IN ($contacts) 
        ORDER BY cc.receive_date"
            );
            $header = '
        <table style="border: 1px solid #999; margin: 1em 0em 1em; border-collapse: collapse; width:100%;">
          <thead  style="text-align: left; border-bottom: 1px solid #999; background-color: #ffcc33;"><tr>
            <th>Date</th>
            <th>Type</th>
            <th>Source</th>
            <th>Amount</th>
            <th>Paid By</th>
            <th>Notes</th>
          </tr></thead>
          <tbody style="padding: 4px; border-bottom: 1px solid #999 background-color: #e8e9ed;">';


            while ($dao->fetch()) {
                $cid = $dao->contact_id;
                $row = '
          <tr>
            <td style="padding-left: 4px;">' . date('m/d/Y', strtotime($dao->receive_date)) . '</td>
            <td>' . $dao->contrib_type . '</td>
            <td>' . $dao->source . ' </td> 
            <td style="padding-right: 4px;" align=right>$' . $dao->total_amount . '</td>
            <td>' . ($dao->payment_instrument ? $dao->payment_instrument : 'In Kind')
                        . ($dao->check_number ? ' #' . $dao->check_number : '') . '</td>
            <td>' . ($dao->honoree ? "<br />{$dao->honor_type} {$dao->honoree}" : '') . '</td>
          </tr>';
                $values[$cid]['donor.current_donation'] .= $row;
                /*           if (in_array($cid, $cids)) {
                  $values[$cid]['donor.current_donation'] = woolman_aval($values[$cid], 'donor.current_donation', $header) . $row;
                  }
                  if (isset($spouses[$cid])) {
                  $values[$spouses[$cid]]['donor.current_donation'] = woolman_aval($values[$spouses[$cid]], 'donor.current_donation', $header) . $row;
                  } */
            }
            foreach ($cids as $cid) {
                if (!empty($values[$cid]['donor.current_donation'])) {
                    $values[$cid]['donor.current_donation'] = $header . $values[$cid]['donor.current_donation'] . '</tbody></table>';
                }
            }
        }
        // Next check the current donation defail
        if (in_array('prior_donation', $tokens['donor'])) {
            $contacts = implode(',', $cids);
            $dao = &CRM_Core_DAO::executeQuery("
        SELECT cc.contact_id, cc.total_amount, cc.receive_date, cc.check_number, cc.source, con.display_name, hon.display_name as honoree, pi.label AS payment_instrument, ht.label AS honor_type, cType.name as contrib_type
        FROM civicrm_contribution cc
        INNER JOIN civicrm_contact con ON con.id = cc.contact_id
        LEFT JOIN civicrm_contribution_type cType ON ( cType.id = cc.contribution_type_id ) 
        LEFT JOIN civicrm_contact hon ON hon.id = cc.honor_contact_id
        LEFT JOIN civicrm_option_value pi ON cc.payment_instrument_id = pi.value AND pi.option_group_id = (SELECT id FROM civicrm_option_group WHERE name = 'payment_instrument')
        LEFT JOIN civicrm_option_value ht ON cc.honor_type_id = ht.value AND ht.option_group_id = (SELECT id FROM civicrm_option_group WHERE name = 'honor_type')
        WHERE cc.is_test = 0 AND cType.is_deductible = 1 AND cc.contribution_status_id = 1
        AND (YEAR(cc.receive_date) = YEAR(NOW())-1) and cc.contact_id IN ($contacts) 
        ORDER BY cc.receive_date"
            );
            $header = '
        <table style="border: 1px solid #999; margin: 1em 0em 1em; border-collapse: collapse; width:100%;">
          <thead  style="text-align: left; border-bottom: 1px solid #999; background-color: #ffcc33;"><tr>
            <th>Date</th>
            <th>Type</th>
            <th>Source</th>
            <th>Amount</th>
            <th>Paid By</th>
            <th>Notes</th>
          </tr></thead>
          <tbody style="padding: 4px; border-bottom: 1px solid #999 background-color: #e8e9ed;">';


            while ($dao->fetch()) {
                $cid = $dao->contact_id;
                $row = '
          <tr>
            <td style="padding-left: 4px;">' . date('m/d/Y', strtotime($dao->receive_date)) . '</td>
            <td>' . $dao->contrib_type . '</td>
            <td>' . $dao->source . ' </td> 
            <td style="padding-right: 4px;" align=right>$' . $dao->total_amount . '</td>
            <td>' . ($dao->payment_instrument ? $dao->payment_instrument : 'In Kind')
                        . ($dao->check_number ? ' #' . $dao->check_number : '') . '</td>
            <td>' . ($dao->honoree ? "<br />{$dao->honor_type} {$dao->honoree}" : '') . '</td>
          </tr>';
                $values[$cid]['donor.prior_donation'] .= $row;
                /*           if (in_array($cid, $cids)) {
                  $values[$cid]['donor.current_donation'] = woolman_aval($values[$cid], 'donor.current_donation', $header) . $row;
                  }
                  if (isset($spouses[$cid])) {
                  $values[$spouses[$cid]]['donor.current_donation'] = woolman_aval($values[$spouses[$cid]], 'donor.current_donation', $header) . $row;
                  } */
            }
            foreach ($cids as $cid) {
                if (!empty($values[$cid]['donor.prior_donation'])) {
                    $values[$cid]['donor.prior_donation'] = $header . $values[$cid]['donor.prior_donation'] . '</tbody></table>';
                }
            }
        }
        
        // Now for total current year
        
        if (in_array('total_current', $tokens['donor'])) {
            $contacts = implode(',', $cids);
            $dao = &CRM_Core_DAO::executeQuery("SELECT contact_id,
            sum( total_amount ) as total_amount
            FROM   civicrm_contribution cc
            LEFT JOIN civicrm_contribution_type cType ON ( cType.id = cc.contribution_type_id ) 
            WHERE  cc.is_test = 0 AND cType.is_deductible = 1 AND cc.contribution_status_id = 1
        AND (YEAR(cc.receive_date) = YEAR(NOW())) and cc.contact_id IN ($contacts)
            GROUP BY contact_id     "
            ); 
            
            while ($dao->fetch()) {
                $cid = $dao->contact_id;
                $values[$cid]['donor.total_current'] = $dao->total_amount;
        }
            
 
    }
    // Now for total prior year
        
        if (in_array('total_prior', $tokens['donor'])) {
            $contacts = implode(',', $cids);
            $dao = &CRM_Core_DAO::executeQuery("SELECT contact_id,
            sum( total_amount ) as total_amount
            FROM   civicrm_contribution cc
            LEFT JOIN civicrm_contribution_type cType ON ( cType.id = cc.contribution_type_id ) 
            WHERE  cc.is_test = 0 AND cType.is_deductible = 1 AND cc.contribution_status_id = 1
        AND (YEAR(cc.receive_date) = YEAR(NOW())-1) and cc.contact_id IN ($contacts)
            GROUP BY contact_id     "
            ); 
            
            while ($dao->fetch()) {
                $cid = $dao->contact_id;
                $values[$cid]['donor.total_prior'] = $dao->total_amount;
        }
            
 
    }
    }
    
}
