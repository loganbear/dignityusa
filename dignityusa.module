<?php

$custom_field = array('chapter_name' => 'custom_5');
/**
 * @file
 * Special customization for DignityUSA and CiviCRM
 **/


/**
 * This hook is invoked when building a CiviCRM form.
 * This hook should also be used to set the default values of a form element
 *
 * Parameters:
 * string $formName - the name of the form
 * object $form - reference to the form object
 */


function dignityusa_civicrm_buildForm($formName, &$form)
{

    switch($form->getVar('_id')) {
/*        case 3:
            if ($formName == 'CRM_Contribute_Form_Contribution_Main') {
                // Assumes templates are in a templates folder relative to this file
                $templatePath = realpath(dirname(__FILE__) . "/templates");
                // Add fields
                $form->add('group', 'spouseInfo', ts('Spouse Information'));
                $form->add('text', 'spouseFirstName', ts('Spouse First Name'));
                $form->add('text', 'spouseLastName', ts('Spouse Last Name'));
                $form->add('text', 'spouseEmail', ts('Spouse Email'));
                $form->addRule("spouseEmail", ts('Email is not valid.'), 'email');
                CRM_Core_Region::instance('page-body')->add(array('template' => "{$templatePath}/spouseInfo.tpl"));
            } elseif (($formName == 'CRM_Contribute_Form_Contribution_Confirm') ||
                ($formName == 'CRM_Contribute_Form_Contribution_ThankYou') ) {
                    $defaults = array();
                    $sFirst = $form->_params["spouseFirstName"];
                    $sLast = $form->_params["spouseLastName"];
                    $sEmail = $form->_params["spouseEmail"];
                    $form->_values["spouseFirstName"] = $sFirst;
                    $form->_values["spouseLastName"] = $sLast;
                    $form->_values["spouseEmail"] = $sEmail;
                    $form->add('group', 'spouseInfo', ts('Spouse Information'));
                    $form->add('text', 'spouseFirstName', ts('Spouse First Name'), $sFirst);
                    $form->add('text', 'spouseLastName', ts('Spouse Last Name'), $sLast);
                    $form->add('text', 'spouseEmail', ts('Spouse Email'), $sEmail);
                    $defaults['spouseFirstName'] = $sFirst;
                    $defaults['spouseLastName'] = $sLast;
                    $defaults['spouseEmail'] = $sEmail;
                    $form->setDefaults($defaults);
        //            CRM_Core_Error::debug('Form', $form);
        //            exit;

            }
            break;  */
        case 31:   // Support Your Local Chapter
            $chNum = $_GET["chNum"];
            if (isset($chNum)) {
                $params = array(
                    'version' => 3,
                    'sequential' => 1,
                    'id' => $chNum,
                    'option_group_id' => 74,
                );
                $result = civicrm_api('OptionValue', 'getsingle', $params);
                if ($result['is_error'] == 0) {
                    $defaults['custom_5'] = $result['value'];
                    $form->setDefaults($defaults);
                    $form->freeze('custom_5');
                }
            }
            break;
        case 35:  // Donate

            if ($formName == 'CRM_Contribute_Form_Contribution_Main') {
                $refCode = $_GET["refCode"];         

            $defaults['custom_104'] = isset($refCode) ? $refCode : $_SERVER['HTTP_REFERER'];
            $form->setDefaults($defaults);
            $form->freeze('custom_104');
            }
            break;
        case 37:  // Guardian Angel
            if ($formName == 'CRM_Contribute_Form_Contribution_Main') {
                $defaults['is_recur'] = true;
                $form->setDefaults($defaults);
                $form->freeze('is_recur');
            }
            break;
        case 62:    // Gift of Dignity
            if ( $formName == 'CRM_Contribute_Form_Contribution_Main' ) {
    // Modify the classes/attributes for country and state fields so the country dropdown will dynamically update the state dropdown
                $form->updateElementAttr('custom_114', array('class' => 'crm-select2 crm-chain-select-target crm-form-select', 'data-callback' => 'civicrm/ajax/jqState', 'data-name' => 'custom_114', 'data-select-prompt' => '- select -', 'data-empty-prompt' => 'Choose country first', 'data-none-prompt' => '- N/A -'));
                $form->updateElementAttr('custom_113', array('class' => 'crm-select2 crm-chain-select-control crm-form-select', 'data-target="custom_114"', 'placeholder' => '- select -'));
            }
            break;
    }
}


/**
 * hook_civicrm_validateForm( $formName, &$fields, &$files, &$form, &$errors )
 * Description: Validation of forms. This hook was introduced in v4.2
 * Parameters
 * $formName - Name of the form being validated, you will typically switch off this value.
 * $fields - Array of name value pairs for all 'POST'ed form values
 * $files - Array of file properties as sent by PHP POST protocol
 * $form - Reference to the civicrm form object. This is useful if you want to retrieve any values that we've constructed in the form
 * $errors - Reference to the errors array. All errors will be added to this array
 *
 * Returns
 * true if form validates successfully,
 * otherwise array with input field names as keys and error message strings as values
 **/

function dignityusa_civicrm_validateForm($formName, &$fields, &$files, &$form, &$errors)
{
    if ($formName == 'CRM_Contribute_Form_Contribution_Main') {
        $fId = $form->getVar('_id');
        if ($fId == 3) {
            if (($fields['price_99'] != 0) && ($fields['price_97'] != 0)) {
                $errors['price_99'] = ts('If you use the Additional Contribution field, please select No Thank You for Membership');
            }
        }
        if ($form->getVar('_id') == 32) {
// Make sure that requested date is greater than today
            $reqDate = strtotime($fields['custom_33']);
            $todaysDate = strtotime(date('Y-m-d'));
            if ($reqDate <= $todaysDate) {
                $errors['custom_33'] = ts('Please request a date in the future.');
            }
            $specDate = date('Y-m-d', $reqDate);
            $query = ts(
                "SELECT * FROM civicrm_value_day_donation_10
                        WHERE cast(donation_day_33 as date) = cast('" . $specDate . "' as date)"
            );

            $dao = &CRM_Core_DAO::executeQuery($query);
            while ($dao->fetch()) {
                $errors['custom_33'] = ts('Date already claimed');
            }
        }
    }
}

/*
 *  hook_civicrm_tokens( &$tokens )
 *  This hook is called to allow custom tokens to be defined.  Their values will need to be supplied by hook_civicrm_tokenValues
 *  Parameters:
 *    $tokens: reference to the associative array of custom tokens that are available to be used in mailings and other contexts.
 *    This will be an empty array unless an implementation of hook_civicrm_tokens adds items to it
 */

function dignityusa_civicrm_tokens(&$tokens)
{
    $tokens['donor'] = array(
        'donor.current_donation' => 'Donations: Curr Yr Detail',
        'donor.prior_donation' => 'Donations: Prior Yr Detail',
        'donor.total_current' => 'Donations: Curr Yr Total',
        'donor.total_prior' => 'Donations: Prior Yr Total',
        'donor.today' => 'Todays date',
        'donor.lastcontribution_amount' => 'Amount of last contribution',
        'donor.lastcontribution_date' => 'Date of last contribution',
        'donor.lastcontribution_financial_type' => 'Financial type of last contribution',
    );
}

/*
 * hook_civicrm_tokenValues( &$values, $cids, $job = null, $tokens = array(), $context = null )
 */

function dignityusa_civicrm_tokenValues(&$values, $cids, $job = null, $tokens = array(), $context = null)
{
    // Check to see if any of the donor tokens are needed
    if (!empty($tokens['donor'])) {
        //token maf_tokens.today
        if (in_array('today', $tokens['donor']) || array_key_exists('today', $tokens['donor'])) {
            dignityusa_today($values, $cids, $job, $tokens, $context);
        }
        // - donor.lastcontribution_amount
        // - donor.lastcontribution_date
        // - donor.lastcontribution_financial_type
        if (in_array('lastcontribution_amount', $tokens['donor']) ||
            in_array('lastcontribution_date', $tokens['donor']) ||
            in_array('lastcontribution_financial_type', $tokens['donor']) ||
            array_key_exists('lastcontribution_amount', $tokens['donor']) ||
            array_key_exists('lastcontribution_date', $tokens['donor']) ||
            array_key_exists('lastcontribution_financial_type', $tokens['donor'])
        ) {
            dignityusa_lastcontribution($values, $cids, $job, $tokens, $context);
        }

        // Next check the current donation defail
        if (in_array('current_donation', $tokens['donor'])) {
            $contacts = implode(',', $cids);
            $dao = &CRM_Core_DAO::executeQuery(
                "
        SELECT cc.contact_id, cc.total_amount, cc.receive_date, cc.check_number, cc.source, con.display_name, hon.display_name as honoree, pi.label AS payment_instrument, ht.label AS honor_type, cType.name as contrib_type
        FROM civicrm_contribution cc
        INNER JOIN civicrm_contact con ON con.id = cc.contact_id
        LEFT JOIN civicrm_financial_type cType ON ( cType.id = cc.financial_type_id )
        LEFT JOIN civicrm_contribution_soft soft ON soft.contribution_id = cc.id
        LEFT JOIN civicrm_contact hon ON hon.id = soft.contact_id
        LEFT JOIN civicrm_option_value pi ON cc.payment_instrument_id = pi.value AND pi.option_group_id = (SELECT id FROM civicrm_option_group WHERE name = 'payment_instrument')
        LEFT JOIN civicrm_option_value ht ON soft.soft_credit_type_id = ht.value AND ht.option_group_id = (SELECT id FROM civicrm_option_group WHERE name = 'soft_credit_type')
        WHERE cc.is_test = 0 AND cType.is_deductible = 1 AND cc.contribution_status_id = 1
        AND (YEAR(cc.receive_date) = YEAR(NOW())) and cc.contact_id IN ($contacts)
        ORDER BY cc.receive_date"
            );
            $header = '
        <table style="border: 1px solid #999; margin: 1em 0em 1em; border-collapse: collapse; width:100%;">
          <thead  style="text-align: left; border-bottom: 1px solid #999; background-color: #ffcc33;"><tr>
            <th>Date</th>
            <th>Type</th>
            <th>Paid By</th>
            <th>Amount</th>
          </tr></thead>
          <tbody style="padding: 4px; border-bottom: 1px solid #999 background-color: #e8e9ed;">';


            while ($dao->fetch()) {
                $cid = $dao->contact_id;
                $row = '
          <tr>
            <td style="padding-left: 4px;">' . date('m/d/Y', strtotime($dao->receive_date)) . '</td>
            <td>' . $dao->contrib_type . '</td>
            <td>' . ($dao->payment_instrument ? $dao->payment_instrument : 'In Kind')
                    . ($dao->check_number ? ' #' . $dao->check_number : '') . '</td>
            <td style="padding-right: 4px;" align=right>$' . $dao->total_amount . '</td>
          </tr>';
                $values[$cid]['donor.current_donation'] .= $row;
                /*           if (in_array($cid, $cids)) {
                  $values[$cid]['donor.current_donation'] = woolman_aval($values[$cid], 'donor.current_donation', $header) . $row;
                  }
                  if (isset($spouses[$cid])) {
                  $values[$spouses[$cid]]['donor.current_donation'] = woolman_aval($values[$spouses[$cid]], 'donor.current_donation', $header) . $row;
                  } */
            }
            foreach ($cids as $cid) {
                if (!empty($values[$cid]['donor.current_donation'])) {
                    $values[$cid]['donor.current_donation'] = $header . $values[$cid]['donor.current_donation'] . '</tbody></table>';
                }
            }
        }
        // Next check the current donation defail
        if (in_array('prior_donation', $tokens['donor'])) {
            $contacts = implode(',', $cids);
            $dao = &CRM_Core_DAO::executeQuery(
                "SELECT cc.contact_id, cc.total_amount, cc.receive_date, cc.check_number, cc.source, con.display_name, hon.display_name as honoree, pi.label AS payment_instrument, ht.label AS honor_type, cType.name as contrib_type
        FROM civicrm_contribution cc
        INNER JOIN civicrm_contact con ON con.id = cc.contact_id
        LEFT JOIN civicrm_financial_type cType ON ( cType.id = cc.financial_type_id )
        LEFT JOIN civicrm_contribution_soft soft ON soft.contribution_id = cc.id
        LEFT JOIN civicrm_contact hon ON hon.id = soft.contact_id
        LEFT JOIN civicrm_option_value pi ON cc.payment_instrument_id = pi.value AND pi.option_group_id = (SELECT id FROM civicrm_option_group WHERE name = 'payment_instrument')
        LEFT JOIN civicrm_option_value ht ON soft.soft_credit_type_id = ht.value AND ht.option_group_id = (SELECT id FROM civicrm_option_group WHERE name = 'soft_credit_type')
        WHERE cc.is_test = 0 AND cType.is_deductible = 1 AND cc.contribution_status_id = 1
        AND (YEAR(cc.receive_date) = YEAR(NOW())-1) and cc.contact_id IN ($contacts)
        ORDER BY cc.receive_date"
            );
            $header = '
        <table style="border: 1px solid #999; margin: 1em 0em 1em; border-collapse: collapse; width:100%;">
          <thead  style="text-align: left; border-bottom: 1px solid #999; background-color: #ffcc33;"><tr>
            <th>Date</th>
            <th>Type</th>
            <th>Paid By</th>
            <th>Amount</th>
          </tr></thead>
          <tbody style="padding: 4px; border-bottom: 1px solid #999 background-color: #e8e9ed;">';


            while ($dao->fetch()) {
                $cid = $dao->contact_id;
                $row = '
          <tr>
            <td style="padding-left: 4px;">' . date('m/d/Y', strtotime($dao->receive_date)) . '</td>
            <td>' . $dao->contrib_type . '</td>
            <td>' . ($dao->payment_instrument ? $dao->payment_instrument : 'In Kind')
                    . ($dao->check_number ? ' #' . $dao->check_number : '') . '</td>
            <td style="padding-right: 4px;" align=right>$' . $dao->total_amount . '</td>
          </tr>';
                $values[$cid]['donor.prior_donation'] .= $row;
                /*           if (in_array($cid, $cids)) {
                  $values[$cid]['donor.current_donation'] = woolman_aval($values[$cid], 'donor.current_donation', $header) . $row;
                  }
                  if (isset($spouses[$cid])) {
                  $values[$spouses[$cid]]['donor.current_donation'] = woolman_aval($values[$spouses[$cid]], 'donor.current_donation', $header) . $row;
                  } */
            }
            foreach ($cids as $cid) {
                if (!empty($values[$cid]['donor.prior_donation'])) {
                    $values[$cid]['donor.prior_donation'] = $header . $values[$cid]['donor.prior_donation'] . '</tbody></table>';
                }
            }
        }

        // Now for total current year

        if (in_array('total_current', $tokens['donor'])) {
            $contacts = implode(',', $cids);
            $dao = &CRM_Core_DAO::executeQuery(
                "SELECT contact_id,
                sum( total_amount ) as total_amount
                FROM   civicrm_contribution cc
                LEFT JOIN civicrm_financial_type cType ON ( cType.id = cc.financial_type_id )
                WHERE  cc.is_test = 0 AND cType.is_deductible = 1 AND cc.contribution_status_id = 1
            AND (YEAR(cc.receive_date) = YEAR(NOW())) and cc.contact_id IN ($contacts)
                GROUP BY contact_id     "
            );

            while ($dao->fetch()) {
                $cid = $dao->contact_id;
                $values[$cid]['donor.total_current'] = $dao->total_amount;
            }


        }
        // Now for total prior year

        if (in_array('total_prior', $tokens['donor'])) {
            $contacts = implode(',', $cids);
            $dao = &CRM_Core_DAO::executeQuery(
                "SELECT contact_id,
                                                   sum( total_amount ) as total_amount
                                                   FROM   civicrm_contribution cc
                                                   LEFT JOIN civicrm_financial_type cType ON ( cType.id = cc.financial_type_id )
                                                   WHERE  cc.is_test = 0 AND cType.is_deductible = 1 AND cc.contribution_status_id = 1
                                                   AND (YEAR(cc.receive_date) = YEAR(NOW())-1) and cc.contact_id IN ($contacts)
                                                   GROUP BY contact_id"
            );

            while ($dao->fetch()) {
                $cid = $dao->contact_id;
                $values[$cid]['donor.total_prior'] = $dao->total_amount;
            }
        }
    }
}

/*
 * Returns the value of token donor.today
 */

function dignityusa_today(&$values, $cids, $job = null, $tokens = array(), $context = null)
{
    if (!empty($tokens['donor'])) {
        if (in_array('today', $tokens['donor']) || array_key_exists('today', $tokens['donor'])) {
            $today = new DateTime();
            foreach ($cids as $cid) {
                $values[$cid]['donor.today'] = dignityusa_date_format($today);
            }
        }
    }
}

/*
 * Formats date to Monthname Day, Year
 */
function dignityusa_date_format($date)
{
    $str = $date->format('F') . ' ' . $date->format('j') . ', ' . $date->format('Y');
    return $str;
}

/*
 * Returns the value of tokens:
 * - donor.lastcontribution_amount
 * - donor.lastcontribution_date
 * - donor.lastcontribution_financial_type
 */
function dignityusa_lastcontribution(&$values, $cids, $job = null, $tokens = array(), $context = null)
{
    $contacts = implode(',', $cids);
    if (!empty($tokens['donor'])) {
        if ((in_array('lastcontribution_amount', $tokens['donor'])) ||
            (in_array('lastcontribution_date', $tokens['donor'])) ||
            (in_array('lastcontribution_financial_type', $tokens['donor']))
        ) {
            $dao = &CRM_Core_DAO::executeQuery(
                "
			SELECT cc.*, ft.name as financial_type
			FROM civicrm_contribution as cc LEFT JOIN civicrm_financial_type ft ON cc.financial_type_id = ft.id
			WHERE cc.is_test = 0 AND
			receive_date = (SELECT max(receive_date) FROM civicrm_contribution c2 WHERE c2.contact_id = cc.contact_id AND c2.contribution_status_id = 1)
			AND cc.contact_id IN ($contacts)
	    "
            );

            while ($dao->fetch()) {
                $cid = $dao->contact_id;
                if (in_array($cid, $cids)) {
                    if (in_array('lastcontribution_amount', $tokens['donor']) ||
                        array_key_exists('lastcontribution_amount', $tokens['donor'])
                    ) {
                        $amount = (float)$dao->total_amount;
                        $values[$cid]['donor.lastcontribution_amount'] = '$' . number_format($amount, 2, '.', ',');
                    }
                    if (in_array('lastcontribution_date', $tokens['donor']) ||
                        array_key_exists('lastcontribution_date', $tokens['donor'])
                    ) {
                        $date = new DateTime($dao->receive_date);
                        $values[$cid]['donor.lastcontribution_date'] = dignityusa_date_format($date);
                    }
                    if (in_array('lastcontribution_financial_type', $tokens['donor']) ||
                        array_key_exists('lastcontribution_financial_type', $tokens['donor'])
                    ) {
                        $values[$cid]['donor.lastcontribution_financial_type'] = $dao->financial_type;
                    }
                }
            }
        }
    }
}
